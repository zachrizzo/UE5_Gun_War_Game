# Transitioning Unreal Engine Project from Windows to macOS: A Build Log

This document outlines the process undertaken to successfully build a Windows-developed Unreal Engine project (AGLS v1.4) on a macOS environment. It details the troubleshooting steps, errors encountered, and their resolutions.

## 1. Initial Setup and Plugin Verification

The first step was to ensure the project's plugins were compatible with macOS and to clean out any platform-specific precompiled binaries.

*   **Plugin Manifest (`.uplugin`) Checks:**
    *   Each plugin's `.uplugin` file was inspected.
    *   We verified that each plugin either had `"Mac"` in its `PlatformAllowList` or was an `"Editor"` type plugin (which generally don't require explicit platform listing for the editor itself). All plugins met these criteria:
        *   `JakubCableComponent.uplugin`
        *   `IWALS_AbilitySystem.uplugin`
        *   `HelpfulFunctions.uplugin`
        *   `JakubAnimNodes.uplugin`
        *   `ClimbingNavigation.uplugin`
        *   `GraphDebbuger.uplugin` (Editor plugin)
*   **Removing Precompiled Binaries:**
    *   Attempted to delete the `Binaries` subfolder within each plugin's directory (e.g., `Plugins/JakubCableComponent/Binaries`).
    *   In most cases, these folders were already non-existent, which is fine as it ensures a fresh compilation for macOS.

## 2. Checking for Hardcoded Windows Paths

Windows-style paths can cause significant issues on other operating systems.

*   **`C:\` Search:**
    *   A codebase-wide search for the literal string `C:\` (common in absolute Windows paths) was performed across `.h`, `.cpp`, `.cs`, and `.ini` files.
    *   **Result:** No instances were found.
*   **`.ini` File Path Separator Check:**
    *   Searched `.ini` files for patterns like `Path=\` or `Directory=\` which might indicate hardcoded paths using backslashes.
    *   **Result:** No such obvious hardcoded paths were found.

## 3. Locating Unreal Engine and Generating Xcode Project Files

To build for macOS, Xcode project files are necessary. These are generated by a script provided with Unreal Engine.

*   **Finding the UE Installation:**
    *   The Unreal Engine installation directory was needed. After listing `/Users/Shared/`, two potential candidates were `UnrealEngine/` and `Epic Games/`.
    *   Further investigation of `/Users/Shared/Epic Games/` revealed `UE_5.5/`, which was identified as the correct Unreal Engine installation path.
*   **Generating Project Files:**
    *   The `GenerateProjectFiles.sh` script was executed:
        ```bash
        '/Users/Shared/Epic Games/UE_5.5/Engine/Build/BatchFiles/Mac/GenerateProjectFiles.sh' -project="/Volumes/4TB-Z/unreal_engine/AGLS v1.4/AGLS.uproject" -game -engine
        ```
    *   **Initial Output & Warnings:** The script ran but produced several warnings:
        1.  `Plugin 'HelpfulFunctions' does not list plugin 'PoseSearch' as a dependency, but module 'HelpfulFunctions' depends on 'PoseSearch'.`
        2.  `Plugin 'IWALS_AbilitySystem' does not list plugin 'HelpfulFunctions' as a dependency, but module 'IWALS_AbilitySystem' depends on 'HelpfulFunctions'.`
        3.  `Unable to find path to target 'JakubCableComponent' (plugins may not be buildable).` (This was misleading, the actual issue was in its `Build.cs` file).
        4.  A warning about `CableComponent/Private` not being found, stemming from `JakubCableComponent.Build.cs`.

## 4. Addressing Project File Generation Warnings

The warnings from `GenerateProjectFiles.sh` needed to be fixed before attempting a build.

*   **Plugin Dependencies:**
    *   **`HelpfulFunctions.uplugin`:** Added `PoseSearch` as a plugin dependency.
        ```json
        // ... existing code ...
        "Plugins": [
            {
                "Name": "JakubCableComponent",
                "Enabled": true
            },
            {
                "Name": "PoseSearch", // Added
                "Enabled": true
            }
        ]
        // ... existing code ...
        ```
    *   **`IWALS_AbilitySystem.uplugin`:** Added `HelpfulFunctions` as a plugin dependency.
        ```json
        // ... existing code ...
        "Plugins": [
            {
                "Name": "GameplayAbilities",
                "Enabled": true
            },
            {
                "Name": "HelpfulFunctions", // Added
                "Enabled": true
            }
        ]
        // ... existing code ...
        ```
*   **`JakubCableComponent.Build.cs` Path Warning:**
    *   The file contained the line: `PrivateIncludePaths.Add("CableComponent/Private");`
    *   This path was relative to `Plugins/JakubCableComponent/Source/` and pointed to a non-existent directory (`Plugins/JakubCableComponent/Source/CableComponent/Private`).
    *   **Resolution:** This line was removed from `JakubCableComponent.Build.cs` as it was invalid.
*   **Regenerating Project Files:** After these changes, `GenerateProjectFiles.sh` was run again. The dependency warnings and the `CableComponent/Private` warning were resolved.

## 5. Build Attempts and Troubleshooting

With the project files seemingly correct, the build process began.

### 5.1. First Build Attempt: `BuildEditor` and `UnrealPak` Error

*   **Command:**
    ```bash
    '/Users/Shared/Epic Games/UE_5.5/Engine/Build/BatchFiles/RunUAT.sh' BuildEditor -project="/Volumes/4TB-Z/unreal_engine/AGLS v1.4/AGLS.uproject" -platform=Mac
    ```
*   **Result:** Failed.
*   **Error:** `Couldn't find target rules file for target 'UnrealPak' in rules assembly 'UE5Rules, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'. Location: /Users/Shared/Epic Games/UE_5.5/Engine/Binaries/DotNET/UnrealBuildTool/rules/UE5Rules.dll`
    *   This often indicates an issue with how the build target is specified or an incomplete engine setup for the specific build configuration.
*   **Next Step:** Switched to `BuildCookRun` command, which provides more control and is often used for packaging.

### 5.2. Second Build Attempt: `BuildCookRun` and `JakubCableComponent` Compile Error

*   **Command:**
    ```bash
    '/Users/Shared/Epic Games/UE_5.5/Engine/Build/BatchFiles/RunUAT.sh' BuildCookRun -project="/Volumes/4TB-Z/unreal_engine/AGLS v1.4/AGLS.uproject" -platform=Mac -clientconfig=Development -build -target=AGLS
    ```
*   **Result:** Failed.
*   **Error:**
    ```
    /Volumes/4TB-Z/unreal_engine/AGLS v1.4/Plugins/JakubCableComponent/Source/JakubCableComponent/Private/JakubCableComponentBPLibrary.cpp:8:10: fatal error: '..\\Public\\JakubCableComponentBPLibrary.h' file not found
    #include "..\\Public\\JakubCableComponentBPLibrary.h"
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ```
    *   The backslashes (`\\`) in the include path are Windows-specific and invalid on macOS.
*   **Fix for `JakubCableComponentBPLibrary.cpp`:**
    *   The file already contained the correct include: `#include "JakubCableComponentBPLibrary.h"`.
    *   The problematic line `#include "..\\Public\\JakubCableComponentBPLibrary.h"` was redundant and incorrect for macOS, so it was removed.

### 5.3. Addressing Deprecation Warnings and Subsequent Build Errors

After fixing the immediate compile error, the build logs revealed several deprecation warnings that were addressed to ensure future compatibility and stability. The project was regenerated and built iteratively after these changes.

*   **`AISense_BetterSight.cpp` - `IAISightTargetInterface` Usage:**
    *   **Warning:** `CanBeSeenFrom` was called on `Target.SightTargetInterface` which was deprecated.
    *   **Attempt 1:** Changed to `TScriptInterface<IAISightTargetInterface> SightTargetAsInterface = Target.WeakSightTargetInterface; SightTargetAsInterface->CanBeSeenFrom(...)`. This led to a compile error: `no viable conversion from 'TWeakInterfacePtr<IAISightTargetInterface>' to 'IAISightTargetInterface *'`.
    *   **Fix (Attempt 2 - Correct):** The correct way to use the `TWeakInterfacePtr` was to get the raw pointer:
        ```cpp
        if (IAISightTargetInterface* StrongSightInterface = Target.WeakSightTargetInterface.Get())
        {
            // ...
            const EVisibilityResult Result = StrongSightInterface->CanBeSeenFrom(Context, OutSeenLocation, /*...*/);
            // ...
        }
        ```

*   **`AGLS_ZombieCharacterCore.cpp` - `CrouchedHalfHeight`:**
    *   **Warning:** Direct assignment `MOVEMENT->CrouchedHalfHeight = 60.0;` was deprecated.
    *   **Fix:** Changed to use the setter method: `MOVEMENT->SetCrouchedHalfHeight(60.0f);`.

*   **`JWAN_LayerBlendingLogic.cpp` - `GetSlotInertializationRequest`:**
    *   **Warning:** `Context.AnimInstanceProxy->GetSlotInertializationRequest(SName, InertializationRequest)` was deprecated.
    *   **Attempt 1 (Incorrect):** `UE::Anim::FSlotInertializationRequest InertializationRequest = Context.AnimInstanceProxy->GetSlotInertializationRequestData(SName);` This was incorrect as `GetSlotInertializationRequestData` expects the request object by reference as an out parameter.
    *   **Fix (Attempt 2 - Correct):**
        ```cpp
        #include "Animation/AnimNode_Inertialization.h" // Added for FInertializationRequest

        // ...
        FInertializationRequest InertializationRequest; // Changed from UE::Anim::FSlotInertializationRequest
        if (Context.AnimInstanceProxy->GetSlotInertializationRequestData(SName, InertializationRequest))
        // ...
        ```
        The type was also corrected from `UE::Anim::FSlotInertializationRequest` to `FInertializationRequest` (from `AnimNode_Inertialization.h`).

*   **`NavClimbingComponentCore.cpp` - `ANY_PACKAGE`:**
    *   **Warning:** `FindObject<UEnum>(ANY_PACKAGE, TEXT("ENavClimbActionState"), true);` used `ANY_PACKAGE` which is deprecated.
    *   **Fix:** Changed to use `StaticEnum<ENavClimbActionState>();`.

### 5.4. The `PhysicsEngine/WorldCollision.h` Saga in `AISense_BetterSight.cpp`

This was the most persistent and tricky issue.

*   **Initial Error:** After other fixes, the build failed with:
    `Plugins/ClimbingNavigation/Source/ClimbingNavigation/Private/AISense_BetterSight.cpp:3:10: fatal error: 'PhysicsEngine/WorldCollision.h' file not found`
*   The file `AISense_BetterSight.cpp` had `#include "PhysicsEngine/WorldCollision.h"`.
*   **Troubleshooting Steps & Iterations:**
    1.  **Add `PhysicsCore` to `Build.cs`:**
        *   Ensured `PhysicsCore` (which provides `WorldCollision.h`) was in `PrivateDependencyModuleNames` for the `ClimbingNavigation` plugin's `ClimbingNavigation.Build.cs`.
            ```csharp
            PrivateDependencyModuleNames.AddRange(
                new string[]
                {
                    "CoreUObject",
                    "Engine",
                    "Slate",
                    "SlateCore",
                    "PhysicsCore" // Ensured this was present
                }
            );
            ```
        *   **Result:** Did not fix the "file not found" error on its own. Project files were regenerated after this change.
    2.  **Change Include Path (Attempt 1):**
        *   Modified the include in `AISense_BetterSight.cpp` to: `#include "WorldCollision.h"` (removing the `PhysicsEngine/` prefix).
        *   **Result:** This *resolved* the "file not found" error for `WorldCollision.h`. However, it then revealed another error related to `FTraceHandle`.
    3.  **Fix `FTraceHandle` Constructor:**
        *   **Error (revealed by step 2):** `qualified reference to 'FTraceHandle' is a constructor name rather than a type name` due to `return FTraceHandle::FTraceHandle();`.
        *   **Fix:** Changed to the correct default constructor syntax: `return FTraceHandle();`.
    4.  **Revert Include Path (Mistakenly):**
        *   The include was changed back to `#include "PhysicsEngine/WorldCollision.h"`.
        *   **Result:** The "file not found" error for `PhysicsEngine/WorldCollision.h` returned. This confirmed that the build system, despite `PhysicsCore` being a dependency, preferred the direct `#include "WorldCollision.h"`.
    5.  **Final Fix Combination for `AISense_BetterSight.cpp`:**
        *   Set the include back to: `#include "WorldCollision.h"`
        *   Ensured the `FTraceHandle` constructor was `return FTraceHandle();`.
        *   Ensured include order was sensible, with the plugin's own header first, then `CoreMinimal.h`, then `WorldCollision.h`.
            ```cpp
            #include "AISense_BetterSight.h" // Plugin's own header
            #include "CoreMinimal.h"
            #include "WorldCollision.h"      // For FTraceHandle

            #include "Perception/AISense_Sight.h"
            // ... other includes
            ```

## 6. Build Successful!

After these iterative fixes:
1.  Correcting plugin dependencies in `.uplugin` files.
2.  Removing an invalid path from `JakubCableComponent.Build.cs`.
3.  Fixing the Windows-style include in `JakubCableComponentBPLibrary.cpp`.
4.  Addressing C++ deprecation warnings in several files.
5.  Crucially, resolving the `WorldCollision.h` include path and `FTraceHandle` constructor in `AISense_BetterSight.cpp`, along with ensuring `PhysicsCore` was in the `ClimbingNavigation.Build.cs`.

The command:
```bash
'/Users/Shared/Epic Games/UE_5.5/Engine/Build/BatchFiles/RunUAT.sh' BuildCookRun -project="/Volumes/4TB-Z/unreal_engine/AGLS v1.4/AGLS.uproject" -platform=Mac -clientconfig=Development -build -target=AGLS
```
Finally resulted in **BUILD SUCCESSFUL**.

## Key Takeaways for Cross-Platform Unreal Engine Development

*   **PlatformAllowList:** Essential for plugins.
*   **Avoid Hardcoded Paths:** Especially `C:\` and backslashes in paths within code or configuration files.
*   **`Build.cs` Dependencies:** Correctly list all module dependencies (like `PhysicsCore`).
*   **Include Paths:** C++ include paths can be sensitive. Sometimes the build system resolves them in ways that require unprefixed includes even if the header is in a subdirectory of an engine module.
*   **Deprecation Warnings:** Address them sooner rather than later, as they can sometimes hide or lead to more subtle errors on different platforms/compilers.
*   **Iterative Building:** Expect to regenerate project files and attempt builds multiple times when moving to a new platform. Check build logs carefully after each attempt.
*   **`GenerateProjectFiles.sh`:** Run this after any changes to `.uplugin` or `Build.cs` files.

This systematic approach of checking plugin configurations, hunting down platform-specific code, and iteratively fixing compile/linker errors by carefully examining build logs was key to successfully transitioning the project to macOS.
